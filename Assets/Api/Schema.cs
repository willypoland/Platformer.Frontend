// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: schema.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ser {

  /// <summary>Holder for reflection information generated from schema.proto</summary>
  public static partial class SchemaReflection {

    #region Descriptor
    /// <summary>File descriptor for schema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SchemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzY2hlbWEucHJvdG8SA3NlciIfCgdWZWN0b3IyEgkKAXgYASABKAUSCQoB",
            "eRgCIAEoBSKHAQoKR2FtZU9iamVjdBIaCgRtZXNoGAEgAygLMgwuc2VyLlZl",
            "Y3RvcjISDQoFd2lkdGgYAiABKAUSDgoGaGVpZ2h0GAMgASgFEh4KCHBvc2l0",
            "aW9uGAQgASgLMgwuc2VyLlZlY3RvcjISHgoIdmVsb2NpdHkYBSABKAsyDC5z",
            "ZXIuVmVjdG9yMiKCAgoGUGxheWVyEhwKA29iahgBIAEoCzIPLnNlci5HYW1l",
            "T2JqZWN0Eh8KBXN0YXRlGAIgASgOMhAuc2VyLlBsYXllclN0YXRlEhMKC3N0",
            "YXRlX2ZyYW1lGAMgASgFEhIKCnByZXZfaW5wdXQYBCABKAUSEQoJb25fZ3Jv",
            "dW5kGAUgASgIEhEKCW9uX2RhbWFnZRgGIAEoCBIWCg5sZWZ0X2RpcmVjdGlv",
            "bhgHIAEoCBIWCg5jdXJyZW50X2hlYWx0aBgIIAEoBRISCgptYXhfaGVhbHRo",
            "GAkgASgFEiYKDGF0dGFja19waGFzZRgKIAEoDjIQLnNlci5BdHRhY2tQaGFz",
            "ZSKEAQoJR2FtZVN0YXRlEg0KBWZyYW1lGAEgASgFEhwKB3BsYXllcnMYAiAD",
            "KAsyCy5zZXIuUGxheWVyEiIKCXBsYXRmb3JtcxgDIAMoCzIPLnNlci5HYW1l",
            "T2JqZWN0EiYKDW1lbGVlX2F0dGFja3MYBCADKAsyDy5zZXIuR2FtZU9iamVj",
            "dCrfAQoLUGxheWVyU3RhdGUSCAoESURMRRAAEgcKA1JVThABEggKBEpVTVAQ",
            "AhILCgdGQUxMSU5HEAMSCwoHTEFORElORxAEEgkKBVNRVUFUEAUSEwoPT1ZF",
            "UkhFQURfQVRUQUNLEAYSDgoKTUlEX0FUVEFDSxAHEg4KCkxPV19BVFRBQ0sQ",
            "CBIJCgVCTE9DSxAJEg8KC1NRVUFUX0JMT0NLEAoSDAoISElUX1NUVU4QCxIO",
            "CgpCTE9DS19TVFVOEAwSFAoQU1FVQVRfQkxPQ0tfU1RVThANEgkKBURFQVRI",
            "EA4qPgoLQXR0YWNrUGhhc2USCwoHU1RBUlRVUBAAEgoKBkFDVElWRRABEgwK",
            "CFJFQ09WRVJZEAISCAoETk9ORRADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Ser.PlayerState), typeof(global::Ser.AttackPhase), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ser.Vector2), global::Ser.Vector2.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ser.GameObject), global::Ser.GameObject.Parser, new[]{ "Mesh", "Width", "Height", "Position", "Velocity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ser.Player), global::Ser.Player.Parser, new[]{ "Obj", "State", "StateFrame", "PrevInput", "OnGround", "OnDamage", "LeftDirection", "CurrentHealth", "MaxHealth", "AttackPhase" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ser.GameState), global::Ser.GameState.Parser, new[]{ "Frame", "Players", "Platforms", "MeleeAttacks" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlayerState {
    [pbr::OriginalName("IDLE")] Idle = 0,
    [pbr::OriginalName("RUN")] Run = 1,
    [pbr::OriginalName("JUMP")] Jump = 2,
    [pbr::OriginalName("FALLING")] Falling = 3,
    [pbr::OriginalName("LANDING")] Landing = 4,
    [pbr::OriginalName("SQUAT")] Squat = 5,
    [pbr::OriginalName("OVERHEAD_ATTACK")] OverheadAttack = 6,
    [pbr::OriginalName("MID_ATTACK")] MidAttack = 7,
    [pbr::OriginalName("LOW_ATTACK")] LowAttack = 8,
    [pbr::OriginalName("BLOCK")] Block = 9,
    [pbr::OriginalName("SQUAT_BLOCK")] SquatBlock = 10,
    [pbr::OriginalName("HIT_STUN")] HitStun = 11,
    [pbr::OriginalName("BLOCK_STUN")] BlockStun = 12,
    [pbr::OriginalName("SQUAT_BLOCK_STUN")] SquatBlockStun = 13,
    [pbr::OriginalName("DEATH")] Death = 14,
  }

  public enum AttackPhase {
    [pbr::OriginalName("STARTUP")] Startup = 0,
    [pbr::OriginalName("ACTIVE")] Active = 1,
    [pbr::OriginalName("RECOVERY")] Recovery = 2,
    [pbr::OriginalName("NONE")] None = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Vector2 : pb::IMessage<Vector2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector2> _parser = new pb::MessageParser<Vector2>(() => new Vector2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ser.SchemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2(Vector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector2 Clone() {
      return new Vector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameObject : pb::IMessage<GameObject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameObject> _parser = new pb::MessageParser<GameObject>(() => new GameObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ser.SchemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObject(GameObject other) : this() {
      mesh_ = other.mesh_.Clone();
      width_ = other.width_;
      height_ = other.height_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      velocity_ = other.velocity_ != null ? other.velocity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameObject Clone() {
      return new GameObject(this);
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Ser.Vector2> _repeated_mesh_codec
        = pb::FieldCodec.ForMessage(10, global::Ser.Vector2.Parser);
    private readonly pbc::RepeatedField<global::Ser.Vector2> mesh_ = new pbc::RepeatedField<global::Ser.Vector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ser.Vector2> Mesh {
      get { return mesh_; }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Ser.Vector2 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ser.Vector2 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 5;
    private global::Ser.Vector2 velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ser.Vector2 Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mesh_.Equals(other.mesh_)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mesh_.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      mesh_.WriteTo(output, _repeated_mesh_codec);
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Velocity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      mesh_.WriteTo(ref output, _repeated_mesh_codec);
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (velocity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Velocity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mesh_.CalculateSize(_repeated_mesh_codec);
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameObject other) {
      if (other == null) {
        return;
      }
      mesh_.Add(other.mesh_);
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Ser.Vector2();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          Velocity = new global::Ser.Vector2();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mesh_.AddEntriesFrom(input, _repeated_mesh_codec);
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::Ser.Vector2();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            if (velocity_ == null) {
              Velocity = new global::Ser.Vector2();
            }
            input.ReadMessage(Velocity);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            mesh_.AddEntriesFrom(ref input, _repeated_mesh_codec);
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::Ser.Vector2();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            if (velocity_ == null) {
              Velocity = new global::Ser.Vector2();
            }
            input.ReadMessage(Velocity);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Player : pb::IMessage<Player>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ser.SchemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      obj_ = other.obj_ != null ? other.obj_.Clone() : null;
      state_ = other.state_;
      stateFrame_ = other.stateFrame_;
      prevInput_ = other.prevInput_;
      onGround_ = other.onGround_;
      onDamage_ = other.onDamage_;
      leftDirection_ = other.leftDirection_;
      currentHealth_ = other.currentHealth_;
      maxHealth_ = other.maxHealth_;
      attackPhase_ = other.attackPhase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "obj" field.</summary>
    public const int ObjFieldNumber = 1;
    private global::Ser.GameObject obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ser.GameObject Obj {
      get { return obj_; }
      set {
        obj_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Ser.PlayerState state_ = global::Ser.PlayerState.Idle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ser.PlayerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "state_frame" field.</summary>
    public const int StateFrameFieldNumber = 3;
    private int stateFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateFrame {
      get { return stateFrame_; }
      set {
        stateFrame_ = value;
      }
    }

    /// <summary>Field number for the "prev_input" field.</summary>
    public const int PrevInputFieldNumber = 4;
    private int prevInput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrevInput {
      get { return prevInput_; }
      set {
        prevInput_ = value;
      }
    }

    /// <summary>Field number for the "on_ground" field.</summary>
    public const int OnGroundFieldNumber = 5;
    private bool onGround_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnGround {
      get { return onGround_; }
      set {
        onGround_ = value;
      }
    }

    /// <summary>Field number for the "on_damage" field.</summary>
    public const int OnDamageFieldNumber = 6;
    private bool onDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnDamage {
      get { return onDamage_; }
      set {
        onDamage_ = value;
      }
    }

    /// <summary>Field number for the "left_direction" field.</summary>
    public const int LeftDirectionFieldNumber = 7;
    private bool leftDirection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LeftDirection {
      get { return leftDirection_; }
      set {
        leftDirection_ = value;
      }
    }

    /// <summary>Field number for the "current_health" field.</summary>
    public const int CurrentHealthFieldNumber = 8;
    private int currentHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentHealth {
      get { return currentHealth_; }
      set {
        currentHealth_ = value;
      }
    }

    /// <summary>Field number for the "max_health" field.</summary>
    public const int MaxHealthFieldNumber = 9;
    private int maxHealth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHealth {
      get { return maxHealth_; }
      set {
        maxHealth_ = value;
      }
    }

    /// <summary>Field number for the "attack_phase" field.</summary>
    public const int AttackPhaseFieldNumber = 10;
    private global::Ser.AttackPhase attackPhase_ = global::Ser.AttackPhase.Startup;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ser.AttackPhase AttackPhase {
      get { return attackPhase_; }
      set {
        attackPhase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Obj, other.Obj)) return false;
      if (State != other.State) return false;
      if (StateFrame != other.StateFrame) return false;
      if (PrevInput != other.PrevInput) return false;
      if (OnGround != other.OnGround) return false;
      if (OnDamage != other.OnDamage) return false;
      if (LeftDirection != other.LeftDirection) return false;
      if (CurrentHealth != other.CurrentHealth) return false;
      if (MaxHealth != other.MaxHealth) return false;
      if (AttackPhase != other.AttackPhase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (obj_ != null) hash ^= Obj.GetHashCode();
      if (State != global::Ser.PlayerState.Idle) hash ^= State.GetHashCode();
      if (StateFrame != 0) hash ^= StateFrame.GetHashCode();
      if (PrevInput != 0) hash ^= PrevInput.GetHashCode();
      if (OnGround != false) hash ^= OnGround.GetHashCode();
      if (OnDamage != false) hash ^= OnDamage.GetHashCode();
      if (LeftDirection != false) hash ^= LeftDirection.GetHashCode();
      if (CurrentHealth != 0) hash ^= CurrentHealth.GetHashCode();
      if (MaxHealth != 0) hash ^= MaxHealth.GetHashCode();
      if (AttackPhase != global::Ser.AttackPhase.Startup) hash ^= AttackPhase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (obj_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Obj);
      }
      if (State != global::Ser.PlayerState.Idle) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (StateFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StateFrame);
      }
      if (PrevInput != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PrevInput);
      }
      if (OnGround != false) {
        output.WriteRawTag(40);
        output.WriteBool(OnGround);
      }
      if (OnDamage != false) {
        output.WriteRawTag(48);
        output.WriteBool(OnDamage);
      }
      if (LeftDirection != false) {
        output.WriteRawTag(56);
        output.WriteBool(LeftDirection);
      }
      if (CurrentHealth != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrentHealth);
      }
      if (MaxHealth != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHealth);
      }
      if (AttackPhase != global::Ser.AttackPhase.Startup) {
        output.WriteRawTag(80);
        output.WriteEnum((int) AttackPhase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (obj_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Obj);
      }
      if (State != global::Ser.PlayerState.Idle) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (StateFrame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StateFrame);
      }
      if (PrevInput != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PrevInput);
      }
      if (OnGround != false) {
        output.WriteRawTag(40);
        output.WriteBool(OnGround);
      }
      if (OnDamage != false) {
        output.WriteRawTag(48);
        output.WriteBool(OnDamage);
      }
      if (LeftDirection != false) {
        output.WriteRawTag(56);
        output.WriteBool(LeftDirection);
      }
      if (CurrentHealth != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrentHealth);
      }
      if (MaxHealth != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHealth);
      }
      if (AttackPhase != global::Ser.AttackPhase.Startup) {
        output.WriteRawTag(80);
        output.WriteEnum((int) AttackPhase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (obj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Obj);
      }
      if (State != global::Ser.PlayerState.Idle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (StateFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateFrame);
      }
      if (PrevInput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrevInput);
      }
      if (OnGround != false) {
        size += 1 + 1;
      }
      if (OnDamage != false) {
        size += 1 + 1;
      }
      if (LeftDirection != false) {
        size += 1 + 1;
      }
      if (CurrentHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHealth);
      }
      if (MaxHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHealth);
      }
      if (AttackPhase != global::Ser.AttackPhase.Startup) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AttackPhase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.obj_ != null) {
        if (obj_ == null) {
          Obj = new global::Ser.GameObject();
        }
        Obj.MergeFrom(other.Obj);
      }
      if (other.State != global::Ser.PlayerState.Idle) {
        State = other.State;
      }
      if (other.StateFrame != 0) {
        StateFrame = other.StateFrame;
      }
      if (other.PrevInput != 0) {
        PrevInput = other.PrevInput;
      }
      if (other.OnGround != false) {
        OnGround = other.OnGround;
      }
      if (other.OnDamage != false) {
        OnDamage = other.OnDamage;
      }
      if (other.LeftDirection != false) {
        LeftDirection = other.LeftDirection;
      }
      if (other.CurrentHealth != 0) {
        CurrentHealth = other.CurrentHealth;
      }
      if (other.MaxHealth != 0) {
        MaxHealth = other.MaxHealth;
      }
      if (other.AttackPhase != global::Ser.AttackPhase.Startup) {
        AttackPhase = other.AttackPhase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (obj_ == null) {
              Obj = new global::Ser.GameObject();
            }
            input.ReadMessage(Obj);
            break;
          }
          case 16: {
            State = (global::Ser.PlayerState) input.ReadEnum();
            break;
          }
          case 24: {
            StateFrame = input.ReadInt32();
            break;
          }
          case 32: {
            PrevInput = input.ReadInt32();
            break;
          }
          case 40: {
            OnGround = input.ReadBool();
            break;
          }
          case 48: {
            OnDamage = input.ReadBool();
            break;
          }
          case 56: {
            LeftDirection = input.ReadBool();
            break;
          }
          case 64: {
            CurrentHealth = input.ReadInt32();
            break;
          }
          case 72: {
            MaxHealth = input.ReadInt32();
            break;
          }
          case 80: {
            AttackPhase = (global::Ser.AttackPhase) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (obj_ == null) {
              Obj = new global::Ser.GameObject();
            }
            input.ReadMessage(Obj);
            break;
          }
          case 16: {
            State = (global::Ser.PlayerState) input.ReadEnum();
            break;
          }
          case 24: {
            StateFrame = input.ReadInt32();
            break;
          }
          case 32: {
            PrevInput = input.ReadInt32();
            break;
          }
          case 40: {
            OnGround = input.ReadBool();
            break;
          }
          case 48: {
            OnDamage = input.ReadBool();
            break;
          }
          case 56: {
            LeftDirection = input.ReadBool();
            break;
          }
          case 64: {
            CurrentHealth = input.ReadInt32();
            break;
          }
          case 72: {
            MaxHealth = input.ReadInt32();
            break;
          }
          case 80: {
            AttackPhase = (global::Ser.AttackPhase) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameState : pb::IMessage<GameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ser.SchemaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      frame_ = other.frame_;
      players_ = other.players_.Clone();
      platforms_ = other.platforms_.Clone();
      meleeAttacks_ = other.meleeAttacks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Ser.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(18, global::Ser.Player.Parser);
    private readonly pbc::RepeatedField<global::Ser.Player> players_ = new pbc::RepeatedField<global::Ser.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ser.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "platforms" field.</summary>
    public const int PlatformsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Ser.GameObject> _repeated_platforms_codec
        = pb::FieldCodec.ForMessage(26, global::Ser.GameObject.Parser);
    private readonly pbc::RepeatedField<global::Ser.GameObject> platforms_ = new pbc::RepeatedField<global::Ser.GameObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ser.GameObject> Platforms {
      get { return platforms_; }
    }

    /// <summary>Field number for the "melee_attacks" field.</summary>
    public const int MeleeAttacksFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Ser.GameObject> _repeated_meleeAttacks_codec
        = pb::FieldCodec.ForMessage(34, global::Ser.GameObject.Parser);
    private readonly pbc::RepeatedField<global::Ser.GameObject> meleeAttacks_ = new pbc::RepeatedField<global::Ser.GameObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ser.GameObject> MeleeAttacks {
      get { return meleeAttacks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if(!players_.Equals(other.players_)) return false;
      if(!platforms_.Equals(other.platforms_)) return false;
      if(!meleeAttacks_.Equals(other.meleeAttacks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      hash ^= players_.GetHashCode();
      hash ^= platforms_.GetHashCode();
      hash ^= meleeAttacks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      players_.WriteTo(output, _repeated_players_codec);
      platforms_.WriteTo(output, _repeated_platforms_codec);
      meleeAttacks_.WriteTo(output, _repeated_meleeAttacks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      players_.WriteTo(ref output, _repeated_players_codec);
      platforms_.WriteTo(ref output, _repeated_platforms_codec);
      meleeAttacks_.WriteTo(ref output, _repeated_meleeAttacks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      size += platforms_.CalculateSize(_repeated_platforms_codec);
      size += meleeAttacks_.CalculateSize(_repeated_meleeAttacks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      players_.Add(other.players_);
      platforms_.Add(other.platforms_);
      meleeAttacks_.Add(other.meleeAttacks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 26: {
            platforms_.AddEntriesFrom(input, _repeated_platforms_codec);
            break;
          }
          case 34: {
            meleeAttacks_.AddEntriesFrom(input, _repeated_meleeAttacks_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 26: {
            platforms_.AddEntriesFrom(ref input, _repeated_platforms_codec);
            break;
          }
          case 34: {
            meleeAttacks_.AddEntriesFrom(ref input, _repeated_meleeAttacks_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
